name: Delete abandoned branches

on:
    # Run weekly on Sunday midnight
    schedule:
        - cron: '0 0 * * 0'

    # Allow workflow to be manually run from the GitHub UI
    workflow_dispatch:

jobs:
    cleanup_old_branches:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0

            - name: Configure Git user
              run: |
                git config --global user.name "AbhiChanGit"
                git config --global user.email "abhishek.23.01.2005@gmail.com"

            - name: Get Unused Branches
              uses: phpdocker-io/github-actions-delete-abandoned-branches@v2
              id: unused_branches
              with:
                github_token: ${{ github.token }}
                last_commit_age_days: 0
                dry_run: yes

            - name: Get Remote Branches Array
              id: remote_branches
              run: |
                # Clean the deleted branches list from the unused_branches output.
                deleted=$(echo "${{ steps.unused_branches.outputs.deleted_branches }}" | sed "s/[][]//g; s/,/ /g; s/'//g")
                echo "Deleted branches (cleaned): '$deleted'"
                
                matching_branches=""
                # Iterate over remote branches (removing the 'origin/' prefix and excluding HEAD).
                for branch in $(git branch -r | sed 's/ *origin\///g' | grep -v "HEAD"); do
                  echo "Processing branch: '$branch'"
                  # Check if the branch name exists in the 'deleted' variable.
                  if [[ " $deleted " == *" $branch "* ]]; then
                    matching_branches="$matching_branches $branch"
                    echo "Matched branch: '$branch'"
                  else
                    echo "Branch '$branch' did not match"
                  fi
                done
                echo "Final matching branches for deletion: '$matching_branches'"
                echo "::set-output name=branches::$matching_branches"

            - name: Check branches for deletion
              run: |
                if [ -z "${{ steps.remote_branches.outputs.branches }}" ]; then
                  echo "No branches queued for deletion. Exiting workflow."
                  exit 1
                else
                  echo "Branches queued for deletion: ${{ steps.remote_branches.outputs.branches }}"
                fi

            - name: Create branch for PR
              run: |
                git checkout -b delete-branches-${{ github.sha }}
                git commit --allow-empty -m "Prepare PR for abandoned branch deletion"
                git push origin delete-branches-${{ github.sha }}

            - name: Create pull request for branch deletion with gh CLI
              env:
                GH_TOKEN: ${{ github.token }}
              run: |
               # Get the list of branches to be deleted from the remote array output.
                branches_to_delete="${{ steps.remote_branches.outputs.branches }}"
                
                # Build a Markdown table with details of each branch.
                pr_table="| Branch Name | Last Commit Date | Last Commit Message | Commit link | Merged Status |\n|-------------|------------------|---------------------|-------------|--------------|"
                for branch in $branches_to_delete; do
                  git checkout "$branch"
                  commit_date=$(git log -1 --format="%ci" "$branch" || echo "N/A")
                  commit_msg=$(git log -1 --format="%s" "$branch" || echo "N/A")
                  commit_hash=$(git log -1 --format="%H" "$branch" || echo "N/A")
                  merged_status=$(git branch --merged main | findstr -q "$branch" && echo "true" || echo "false")
                  pr_table="${pr_table}\n| ${branch} | ${commit_date} | ${commit_msg} | ${commit_hash} | ${merged_status} |"
                done
                
                pr_body="This pull request identifies branches that are candidates for deletion.
    
                The branches listed below have been renamed by prefixing them with 'delete/'.

                **Important:**
                1) If you agree that these branches should be deleted, please **approve this pull request** and follow the instructions outlined [here](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/approving-a-pull-request-with-required-reviews) to confirm deletion.
                2) If there is a branch you wish to keep, simply rename that branch (remove the 'delete/' prefix) and then approve the pull request.

                **Note: DO NOT MERGE THIS PULL REQUEST INTO main.**

                ### Branch Details

                ${pr_table}
                
                After pull request approval, you can delete the PR branch (delete-branches-${{ github.sha }}) to complete the process (this action will also close the pull request)."
                
                echo -e "$pr_body" > pr_body.txt
                
                gh pr create \
                  --title "Delete abandoned branches" \
                  --body "$(cat pr_body.txt)" \
                  --base main \
                  --head delete-branches-${{ github.sha }}

            - name: Prefix branches with delete
              run: |
                branches_to_delete="${{ steps.remote_branches.outputs.branches }}"
                
                for branch in $branches_to_delete; do
                  echo "Renaming branch: $branch -> delete/$branch"
                  git checkout "$branch" || (git fetch origin "$branch:$branch" && git checkout "$branch")
                  git branch -m "delete/$branch"
                  git push origin --delete "$branch"
                  git push origin "delete/$branch"
                done

            - name: Get output
              run: "echo 'Branches queued for Deletion: ${{ steps.unused_branches.outputs.deleted_branches }}'"
